// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package wal is a generated GoMock package.
package wal

import (
	os "os"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockfsDir is a mock of fsDir interface.
type MockfsDir struct {
	ctrl     *gomock.Controller
	recorder *MockfsDirMockRecorder
}

// MockfsDirMockRecorder is the mock recorder for MockfsDir.
type MockfsDirMockRecorder struct {
	mock *MockfsDir
}

// NewMockfsDir creates a new mock instance.
func NewMockfsDir(ctrl *gomock.Controller) *MockfsDir {
	mock := &MockfsDir{ctrl: ctrl}
	mock.recorder = &MockfsDirMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockfsDir) EXPECT() *MockfsDirMockRecorder {
	return m.recorder
}

// FilesStats mocks base method.
func (m *MockfsDir) FilesStats() ([]os.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilesStats")
	ret0, _ := ret[0].([]os.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilesStats indicates an expected call of FilesStats.
func (mr *MockfsDirMockRecorder) FilesStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilesStats", reflect.TypeOf((*MockfsDir)(nil).FilesStats))
}

// ReadFile mocks base method.
func (m *MockfsDir) ReadFile(filename string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile", filename)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFile indicates an expected call of ReadFile.
func (mr *MockfsDirMockRecorder) ReadFile(filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockfsDir)(nil).ReadFile), filename)
}

// WriteSync mocks base method.
func (m *MockfsDir) WriteSync(filename string, data []byte) (os.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteSync", filename, data)
	ret0, _ := ret[0].(os.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteSync indicates an expected call of WriteSync.
func (mr *MockfsDirMockRecorder) WriteSync(filename, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteSync", reflect.TypeOf((*MockfsDir)(nil).WriteSync), filename, data)
}

// MocklogsRepository is a mock of logsRepository interface.
type MocklogsRepository struct {
	ctrl     *gomock.Controller
	recorder *MocklogsRepositoryMockRecorder
}

// MocklogsRepositoryMockRecorder is the mock recorder for MocklogsRepository.
type MocklogsRepositoryMockRecorder struct {
	mock *MocklogsRepository
}

// NewMocklogsRepository creates a new mock instance.
func NewMocklogsRepository(ctrl *gomock.Controller) *MocklogsRepository {
	mock := &MocklogsRepository{ctrl: ctrl}
	mock.recorder = &MocklogsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocklogsRepository) EXPECT() *MocklogsRepositoryMockRecorder {
	return m.recorder
}

// Write mocks base method.
func (m *MocklogsRepository) Write(logs []Log) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", logs)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MocklogsRepositoryMockRecorder) Write(logs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MocklogsRepository)(nil).Write), logs)
}

// MocklogReadIterator is a mock of logReadIterator interface.
type MocklogReadIterator struct {
	ctrl     *gomock.Controller
	recorder *MocklogReadIteratorMockRecorder
}

// MocklogReadIteratorMockRecorder is the mock recorder for MocklogReadIterator.
type MocklogReadIteratorMockRecorder struct {
	mock *MocklogReadIterator
}

// NewMocklogReadIterator creates a new mock instance.
func NewMocklogReadIterator(ctrl *gomock.Controller) *MocklogReadIterator {
	mock := &MocklogReadIterator{ctrl: ctrl}
	mock.recorder = &MocklogReadIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocklogReadIterator) EXPECT() *MocklogReadIteratorMockRecorder {
	return m.recorder
}

// ReadNext mocks base method.
func (m *MocklogReadIterator) ReadNext() ([]Log, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadNext")
	ret0, _ := ret[0].([]Log)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadNext indicates an expected call of ReadNext.
func (mr *MocklogReadIteratorMockRecorder) ReadNext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadNext", reflect.TypeOf((*MocklogReadIterator)(nil).ReadNext))
}
