// Code generated by MockGen. DO NOT EDIT.
// Source: database.go

// Package database is a generated GoMock package.
package database

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	compute "github.com/hrumst/go-cdb/internal/database/compute"
)

// MockcommandExecParser is a mock of commandExecParser interface.
type MockcommandExecParser struct {
	ctrl     *gomock.Controller
	recorder *MockcommandExecParserMockRecorder
}

// MockcommandExecParserMockRecorder is the mock recorder for MockcommandExecParser.
type MockcommandExecParserMockRecorder struct {
	mock *MockcommandExecParser
}

// NewMockcommandExecParser creates a new mock instance.
func NewMockcommandExecParser(ctrl *gomock.Controller) *MockcommandExecParser {
	mock := &MockcommandExecParser{ctrl: ctrl}
	mock.recorder = &MockcommandExecParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcommandExecParser) EXPECT() *MockcommandExecParserMockRecorder {
	return m.recorder
}

// Parse mocks base method.
func (m *MockcommandExecParser) Parse(input string) (*compute.CommandExec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", input)
	ret0, _ := ret[0].(*compute.CommandExec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockcommandExecParserMockRecorder) Parse(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockcommandExecParser)(nil).Parse), input)
}

// Mockstorage is a mock of storage interface.
type Mockstorage struct {
	ctrl     *gomock.Controller
	recorder *MockstorageMockRecorder
}

// MockstorageMockRecorder is the mock recorder for Mockstorage.
type MockstorageMockRecorder struct {
	mock *Mockstorage
}

// NewMockstorage creates a new mock instance.
func NewMockstorage(ctrl *gomock.Controller) *Mockstorage {
	mock := &Mockstorage{ctrl: ctrl}
	mock.recorder = &MockstorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockstorage) EXPECT() *MockstorageMockRecorder {
	return m.recorder
}

// Del mocks base method.
func (m *Mockstorage) Del(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Del", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Del indicates an expected call of Del.
func (mr *MockstorageMockRecorder) Del(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*Mockstorage)(nil).Del), ctx, key)
}

// Get mocks base method.
func (m *Mockstorage) Get(ctx context.Context, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockstorageMockRecorder) Get(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*Mockstorage)(nil).Get), ctx, key)
}

// Set mocks base method.
func (m *Mockstorage) Set(ctx context.Context, key, val string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, val)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockstorageMockRecorder) Set(ctx, key, val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*Mockstorage)(nil).Set), ctx, key, val)
}
